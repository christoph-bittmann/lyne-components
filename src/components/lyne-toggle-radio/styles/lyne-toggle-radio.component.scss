// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin, available for shared
// and default mode
@include host-component-properties;

:host {

  --two-values-toggle-height: 32;
  --two-values-toggle-inner-height: 28;
  --two-values-toggle-padding-inline: var(--spacing-fixed-4x);

  --background-color: var(--color-cloud-default);
  --toggle-padding: 2;

  --text-color: var(--color-charcoal-default);
  --text-color-checked: var(--color-anthracite-default);

  --transition-duration: 125ms;
  --transition-easing-function: ease-in;

}

input {
  position: absolute;
  inset: 0;
  margin: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  z-index: 1;
}

.toggle {
  display: flex;
  align-items: center;
  gap: pxToRem(var(--spacing-fixed-3x));
}

label {
  @include text-s--regular();
  color: var(--text-color);
}

.toggle--disabled label {
  color: var(--color-graphite-default);
  fill: var(--color-graphite-default);

  @include ifForcedColors {
    color: GrayText;
    fill: GrayText;
  }

}

.toggle__radios-wrapper {
  display: flex;
  flex-wrap: nowrap;
  height: pxToRem(var(--two-values-toggle-height));
  padding: pxToRem(var(--toggle-padding));
  border-radius: pxToRem(var(--two-values-toggle-height));
  background: var(--background-color);

  @include ifForcedColors {
    border: pxToRem(1) solid CanvasText;
  }

}

.toggle--disabled .toggle__radios-wrapper {
  @include ifForcedColors {
    border-color: GrayText;
  }
}

.toggle__radios_label {
  @include screenreaderOnly();
}

.toggle__radio-wrapper {
  position: relative;
}

.toggle__radio {
  position: absolute;
  z-index: 2;
  inset: 0;
}

.toggle__radio:checked + .toggle__radio-label {
  @include text-s--bold();
  line-height: 1;
}

.toggle__radio:checked + .toggle__radio-label span {
  @include ifForcedColors {
    forced-color-adjust: none;
    color: Canvas;
  }
}

.toggle__radio:checked + .toggle__radio-label:after {
  opacity: 1;
  transform: scale(1);
  color: var(--text-color-checked);

  @include ifForcedColors {
    background: CanvasText;
    color: Canvas;
  }

}

.toggle--disabled .toggle__radio:checked  + .toggle__radio-label:after {
  @include ifForcedColors {
    background: GrayText;
  }
}

.toggle--disabled .toggle__radio:checked  + .toggle__radio-label span {
  @include ifForcedColors {
    color: Canvas;
  }
}

.toggle__radio-label {
  display: flex;
  flex: 1 1 auto;
  flex-direction: row;
  gap: pxToRem(var(--spacing-fixed-1x));
  align-items: center;
  text-align: center;
  width: 100%;
  height: 100%;
  padding-inline-start: pxToRem(var(--two-values-toggle-padding-inline));
  padding-inline-end: pxToRem(var(--two-values-toggle-padding-inline));
  line-height: 1;
}

.toggle__radio-label-icon,
.toggle__radio-label-text span {
  position: relative;
  z-index: 1;
}

.toggle__radio-label-text:before {
  position: relative;
  z-index: 0;
  @include text-s--bold();
  display: block;
  content: attr(data-label);
  height: 0;
  line-height: 0;
  text-align: center;
  color: transparent;
  visibility: hidden;
  opacity: 0;
}

.toggle__radio-label:after {
  @include text-s--bold();
  @include box-shadow-5-hard();
  position: absolute;
  inset: 0;
  z-index: 0;
  content: '';
  border-radius: pxToRem(var(--two-values-toggle-height));
  background: var(--color-white-default);
  opacity: 0.000001;
  transition-duration: 75ms;
  transition-timing-function: var(--transition-easing-function);
  transition-property: opacity, transform;
  transform: scale(0.8);
}

// TODO right to left style
// TODO high contrast style
